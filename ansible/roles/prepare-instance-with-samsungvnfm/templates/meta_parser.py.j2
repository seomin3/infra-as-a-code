#!/usr/bin/python
#-*- coding: utf-8 -*-
import json
import time
import os
import socket, struct
import syslog
## ifcfg-ethX for IPv6 ################## 
#    IPV6INIT=yes # Enables IPv6 addressing on interface.
#    IPV6_AUTOCONF=no
#    IPV6ADDR=AAAA::260:3EFF:FE11:5001 --> A서버IPV6주소
#    IPV6ADDR=AAAA::260:3EFF:FE11:5002 --> B서버IPV6주소
#    IPV6_DEFAULTGW=AAAA::260:3EFF:FE11:6780
#########################################


############################################################################
# regular experssion for IPv4 and IPv6
############################################################################
# Constructed with help from
# http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
# Try it on regex101: https://regex101.com/r/yVdrJQ/1
import re

IPV4SEG  = r'(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])'
IPV4ADDR = r'(?:(?:' + IPV4SEG + r'\.){3,3}' + IPV4SEG + r')'
IPV6SEG  = r'(?:(?:[0-9a-fA-F]){1,4})'
IPV6GROUPS = (
    r'(?:' + IPV6SEG + r':){7,7}' + IPV6SEG,                  # 1:2:3:4:5:6:7:8
    r'(?:' + IPV6SEG + r':){1,7}:',                           # 1::                                 1:2:3:4:5:6:7::
    r'(?:' + IPV6SEG + r':){1,6}:' + IPV6SEG,                 # 1::8               1:2:3:4:5:6::8   1:2:3:4:5:6::8
    r'(?:' + IPV6SEG + r':){1,5}(?::' + IPV6SEG + r'){1,2}',  # 1::7:8             1:2:3:4:5::7:8   1:2:3:4:5::8
    r'(?:' + IPV6SEG + r':){1,4}(?::' + IPV6SEG + r'){1,3}',  # 1::6:7:8           1:2:3:4::6:7:8   1:2:3:4::8
    r'(?:' + IPV6SEG + r':){1,3}(?::' + IPV6SEG + r'){1,4}',  # 1::5:6:7:8         1:2:3::5:6:7:8   1:2:3::8
    r'(?:' + IPV6SEG + r':){1,2}(?::' + IPV6SEG + r'){1,5}',  # 1::4:5:6:7:8       1:2::4:5:6:7:8   1:2::8
    IPV6SEG + r':(?:(?::' + IPV6SEG + r'){1,6})',             # 1::3:4:5:6:7:8     1::3:4:5:6:7:8   1::8
    r':(?:(?::' + IPV6SEG + r'){1,7}|:)',                     # ::2:3:4:5:6:7:8    ::2:3:4:5:6:7:8  ::8       ::
    r'fe80:(?::' + IPV6SEG + r'){0,4}%[0-9a-zA-Z]{1,}',       # fe80::7:8%eth0     fe80::7:8%1  (link-local IPv6 addresses with zone index)
    r'::(?:ffff(?::0{1,4}){0,1}:){0,1}[^\s:]' + IPV4ADDR,     # ::255.255.255.255  ::ffff:255.255.255.255  ::ffff:0:255.255.255.255 (IPv4-mapped IPv6 addresses and IPv4-translated addresses)
    r'(?:' + IPV6SEG + r':){1,4}:[^\s:]' + IPV4ADDR,          # 2001:db8:3:4::192.0.2.33  64:ff9b::192.0.2.33 (IPv4-Embedded IPv6 Address)
)
IPV6ADDR = '|'.join(['(?:{})'.format(g) for g in IPV6GROUPS[::-1]])  # Reverse rows for greedy match

############################################################################
############################################################################
############################################################################

def get_default_gateway_linux():
    """Read the default gateway directly from /proc."""
    with open("/proc/net/route") as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                continue

            return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))


"""Check the meta.js exists"""
while True:
    if os.path.exists("/meta.js"):
        break
    time.sleep(1) 

host_name = None

with open("/meta.js", "r") as meta:
    metadata = meta.read()

json_metadata = json.loads(metadata)
encoded_metadata = json.loads(metadata.lower())

ifcfg_eth0 = None
ifcfg_eth1 = None
ifcfg_eth2 = None
ifcfg_eth3 = None
try:
    if encoded_metadata["mgmt_net_ipaddr"] is not None:
        if re.search(IPV6ADDR, encoded_metadata["mgmt_net_ipaddr"]):
            ifcfg_eth0 = "IPV6INIT=yes\nIPV6_AUTOCONF=no\nDEVICE=eth0\nBOOTPROTO=none\nONBOOT=yes\nTYPE=Ethernet\n"
            ifcfg_eth0 = ifcfg_eth0 + "IPV6ADDR=" + encoded_metadata["mgmt_net_ipaddr"] + "/" 
            ifcfg_eth0 = ifcfg_eth0 + str(128 - (4 * encoded_metadata["mgmt_net_subnet"].count("0"))) + "\n"
            ifcfg_eth0 = ifcfg_eth0 + "HWADDR=" + encoded_metadata["mgmt_net_macaddr"]
        else:
            ifcfg_eth0 = "DEVICE=eth0\nONBOOT=yes\nBOOTPROTO=none\nHWADDR=" + encoded_metadata["mgmt_net_macaddr"] + "\n"
            ifcfg_eth0 = ifcfg_eth0 + "IPADDR=" + encoded_metadata["mgmt_net_ipaddr"] + "\n" + "NETMASK=" + encoded_metadata["mgmt_net_subnet"] + "\n"
        os.system("echo \"" + ifcfg_eth0 + "\" > /etc/sysconfig/network-scripts/ifcfg-eth0")
except KeyError:
    syslog.syslog("[Intializing VM] !!!!!!!!!Cannot access mgmt_network in meta.js!!!!!!!!!")

try:
    if encoded_metadata["ipc_net_ipaddr"]:
        if re.search(IPV6ADDR, encoded_metadata["ipc_net_ipaddr"]):
            ifcfg_eth1 = "IPV6INIT=yes\nIPV6_AUTOCONF=no\nDEVICE=eth1\nBOOTPROTO=none\nONBOOT=yes\nTYPE=Ethernet\n"
            ifcfg_eth1 = ifcfg_eth1 + "IPV6ADDR=" + encoded_metadata["ipc_net_ipaddr"] + "/"
            ifcfg_eth1 = ifcfg_eth1 + str(128 - (4 * encoded_metadata["ipc_net_subnet"].count("0"))) + "\n"
            ifcfg_eth1 = ifcfg_eth1 + "HWADDR=" + encoded_metadata["ipc_net_macaddr"]
        else:
            ifcfg_eth1 = "DEVICE=eth1\nONBOOT=yes\nBOOTPROTO=none\nHWADDR=" + encoded_metadata["ipc_net_macaddr"] + "\n"
            ifcfg_eth1 = ifcfg_eth1 + "IPADDR=" + encoded_metadata["ipc_net_ipaddr"] + "\n" + "NETMASK=" + encoded_metadata["ipc_net_subnet"]
        os.system("echo \"" + ifcfg_eth1 + "\" > /etc/sysconfig/network-scripts/ifcfg-eth1")
except KeyError:
    pass
except:
    syslog.syslog("[Intializing VM] !!!!!!!!!Cannot access ipc_network in meta.js!!!!!!!!!")

try:
    if encoded_metadata["ext_net1_ipaddr"]:
        if re.search(IPV6ADDR, encoded_metadata["ext_net1_ipaddr"]):
            ifcfg_eth2 = "IPV6INIT=yes\nIPV6_AUTOCONF=no\nDEVICE=eth2\nBOOTPROTO=none\nONBOOT=yes\nTYPE=Ethernet\n"
            ifcfg_eth2 = ifcfg_eth2 + "IPV6ADDR=" + encoded_metadata["ext_net1_ipaddr"] + "/"
            ifcfg_eth2 = ifcfg_eth2 + str(128 - (4 * encoded_metadata["ext_net1_subnet"].count("0"))) + "\n"
            ifcfg_eth2 = ifcfg_eth2 + "HWADDR=" + encoded_metadata["ext_net1_macaddr"]
        else:
            ifcfg_eth2 = "DEVICE=eth2\nONBOOT=yes\nBOOTPROTO=none\nHWADDR=" + encoded_metadata["ext_net1_macaddr"] + "\n"
            ifcfg_eth2 = ifcfg_eth2 + "IPADDR=" + encoded_metadata["ext_net1_ipaddr"] + "\n" + "NETMASK=" + encoded_metadata["ext_net1_subnet"]
        os.system("echo \"" + ifcfg_eth2 + "\" > /etc/sysconfig/network-scripts/ifcfg-eth2")
except KeyError:
    pass
except:
    syslog.syslog("[Intializing VM] !!!!!!!!!Cannot access diameter_network in meta.js!!!!!!!!!")

try:
    if encoded_metadata["ext_net2_ipaddr"]:
        if re.search(IPV6ADDR, encoded_metadata["ext_net2_ipaddr"]):
            if "LDS" in json_metadata["HOSTNAME"]:
                ifcfg_eth3 = "IPV6INIT=yes\nIPV6_AUTOCONF=no\nDEVICE=eth2\nBOOTPROTO=none\nONBOOT=yes\nTYPE=Ethernet\n"
            else:
                ifcfg_eth3 = "IPV6INIT=yes\nIPV6_AUTOCONF=no\nDEVICE=eth3\nBOOTPROTO=none\nONBOOT=yes\nTYPE=Ethernet\n"
            ifcfg_eth3 = ifcfg_eth3 + "IPV6ADDR=" + encoded_metadata["ext_net2_ipaddr"] + "/"
            ifcfg_eth3 = ifcfg_eth3 + str(128 - (4 * encoded_metadata["ext_net2_subnet"].count("0"))) + "\n"
            ifcfg_eth3 = ifcfg_eth3 + "HWADDR=" + encoded_metadata["ext_net2_macaddr"]
        else:
            if "LDS" in json_metadata["HOSTNAME"]:
                ifcfg_eth3 = "DEVICE=eth2\nONBOOT=yes\nBOOTPROTO=none\nHWADDR=" + encoded_metadata["ext_net2_macaddr"] + "\n"
            else:
                ifcfg_eth3 = "DEVICE=eth3\nONBOOT=yes\nBOOTPROTO=none\nHWADDR=" + encoded_metadata["ext_net2_macaddr"] + "\n"
            ifcfg_eth3 = ifcfg_eth3 + "IPADDR=" + encoded_metadata["ext_net2_ipaddr"] + "\n" + "NETMASK=" + encoded_metadata["ext_net2_subnet"]
        if "LDS" in json_metadata["HOSTNAME"]:
            os.system("echo \"" + ifcfg_eth3 + "\" > /etc/sysconfig/network-scripts/ifcfg-eth2")
        else:
            os.system("echo \"" + ifcfg_eth3 + "\" > /etc/sysconfig/network-scripts/ifcfg-eth3")
except KeyError:
    pass
except:
    syslog.syslog("[Intializing VM] !!!!!!!!!Cannot access diameter_network in meta.js!!!!!!!!!")

try:
    with open("/etc/vnf/hostname", "w") as hostname:
        hostname.write(json_metadata["HOSTNAME"])
        host_name = json_metadata["HOSTNAME"]
        os.system("hostnamectl set-hostname " + host_name) 

    ntp_cmd="server " + json_metadata["NTP_SERVER"] + " iburst"
    os.system("echo " + ntp_cmd + " >> /etc/ntp.conf")
    os.system("systemctl restart ntpd")
except:
    syslog.syslog("[Intializing VM] !!!!!!!!!Cannot access hostname in meta.js!!!!!!!!!")
    exit()


os.system("systemctl restart network")

if re.search(IPV6ADDR, encoded_metadata["default_gateway_ip"]):
    try:
        os.system("route -A inet6 add default gw " + encoded_metadata["default_gateway_ip"])
    except:
        os.system("route -A inet6 del default gw " + encoded_metadata["default_gateway_ip"])
        os.system("route -A inet6 add default gw " + encoded_metadata["default_gateway_ip"])
else:
    try:
        os.system("route add default gw " + encoded_metadata["default_gateway_ip"])
    except:
        os.system("route del default gw " + encoded_metadata["default_gateway_ip"])
        os.system("route add default gw " + encoded_metadata["default_gateway_ip"])
